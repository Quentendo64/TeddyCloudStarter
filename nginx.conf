# Main nginx configuration file
# Handles both HTTP/HTTPS and SNI routing for TeddyCloud

user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    keepalive_timeout  65;

    gzip  on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    # Main HTTP server block - Handles HTTP->HTTPS redirect and Let's Encrypt challenges
    server {
        listen 80;
        server_name example.com;  # Will be replaced by Init.sh
        # HTTP to HTTPS redirect for security
        location / {
            return 301 https://$host$request_uri;
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
    }

    # HTTPS server block - Handles secure connections and proxying to TeddyCloud
    server {
        listen 9443 ssl;
        server_name example.com;
        ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; 
        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; 
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";
        # Session improvements
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        location / {
            client_max_body_size 4096M;
            auth_basic "Restricted Content";
            auth_basic_user_file /etc/nginx/htpasswd;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
            # Disable request buffering for binary uploads
            proxy_request_buffering off;
            # Ensure headers are properly forwarded
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Timeouts
            proxy_read_timeout 300s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            # Buffer configuration for large binary transfers
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            proxy_busy_buffers_size 32k;


            proxy_pass http://teddycloud:80;
        }
        location /nginx_status {            
            auth_basic "Restricted Content";
            auth_basic_user_file /etc/nginx/htpasswd;
            stub_status on;
}
    }
}

# Stream configuration - Handles direct TLS connections from Tonieboxes
stream {
    # Upstream definitions for routing
    upstream sni_teddycloud {
        server nginx:9443;  # Routes to local HTTPS server
    }

    upstream no_sni {
        server teddycloud:443;
    }

    # Add a reject upstream that points to a non-existent port
    upstream reject_upstream {
        server 127.0.0.1:1;  # Non-existent port, will cause connection to fail
    }

    map $ssl_preread_server_name $final_upstream {
        example.com sni_teddycloud;  # Will be replaced by Init.sh
        # For empty SNI (or other domains), you have two options:
        default no_sni;
        # Uncomment the following line to use the reject upstream instead
        # Option 2: Reject all non-SNI traffic (uncomment to use)
        # default reject_upstream;
    }

    # Access logging for stream module
    log_format stream_basic '$remote_addr [$time_local] '
                         '$protocol $status $bytes_sent $bytes_received '
                         '$session_time "$ssl_preread_server_name"';

    access_log /var/log/nginx/stream_access.log stream_basic;

    server {
        listen 443;
        ssl_preread on;  # Needed to access $ssl_preread_server_name
        proxy_pass $final_upstream;
        proxy_ssl_conf_command Options UnsafeLegacyRenegotiation;
        proxy_timeout 30s;
        error_log stderr;
    }
}